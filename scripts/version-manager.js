// \scripts\version-manager.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

class VersionManager {
  constructor() {
    this.rootDir = path.join(__dirname, '..')
    this.clientPackagePath = path.join(this.rootDir, 'client', 'package.json')
    this.serverPackagePath = path.join(this.rootDir, 'server', 'package.json')
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  getCurrentVersion() {
    const clientPackage = JSON.parse(fs.readFileSync(this.clientPackagePath, 'utf8'))
    const serverPackage = JSON.parse(fs.readFileSync(this.serverPackagePath, 'utf8'))

    if (clientPackage.version !== serverPackage.version) {
      throw new Error('–í–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!')
    }

    return clientPackage.version
  }

  // –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
  bumpVersion(type = 'patch') {
    const currentVersion = this.getCurrentVersion()
    const [major, minor, patch] = currentVersion.split('.').map(Number)

    let newVersion
    switch (type) {
      case 'major':
        newVersion = `${major + 1}.0.0`
        break
      case 'minor':
        newVersion = `${major}.${minor + 1}.0`
        break
      case 'patch':
      default:
        newVersion = `${major}.${minor}.${patch + 1}`
        break
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –≤ package.json —Ñ–∞–π–ª–∞—Ö
    this.updatePackageVersions(newVersion)

    // –°–æ–∑–¥–∞—Ç—å git tag
    this.createGitTag(newVersion)

    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å ${currentVersion} –¥–æ ${newVersion}`)
    return newVersion
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –≤ package.json
  updatePackageVersions(version) {
    const updatePackage = (packagePath) => {
      const package = JSON.parse(fs.readFileSync(packagePath, 'utf8'))
      package.version = version
      fs.writeFileSync(packagePath, JSON.stringify(package, null, 2))
    }

    updatePackage(this.clientPackagePath)
    updatePackage(this.serverPackagePath)
  }

  // –°–æ–∑–¥–∞—Ç—å git tag
  createGitTag(version) {
    try {
      execSync(`git add client/package.json server/package.json`, { cwd: this.rootDir })
      execSync(`git commit -m "chore: bump version to ${version}"`, { cwd: this.rootDir })
      execSync(`git tag -a v${version} -m "Release version ${version}"`, { cwd: this.rootDir })
      console.log(`‚úÖ Git tag v${version} —Å–æ–∑–¥–∞–Ω`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ git tag:', error.message)
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
  showVersionHistory() {
    try {
      const tags = execSync('git tag -l --sort=-version:refname', { cwd: this.rootDir })
        .toString()
        .trim()
        .split('\n')
        .filter(Boolean)

      console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π:')
      tags.forEach((tag, index) => {
        console.log(`${index + 1}. ${tag}`)
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π:', error.message)
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Å–∏—é
  switchToVersion(version) {
    try {
      execSync(`git checkout v${version}`, { cwd: this.rootDir })
      console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–µ—Ä—Å–∏—é ${version}`)
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–µ—Ä—Å–∏—é ${version}:`, error.message)
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
const args = process.argv.slice(2)
const command = args[0]
const param = args[1]

const versionManager = new VersionManager()

switch (command) {
  case 'current':
    console.log('üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:', versionManager.getCurrentVersion())
    break
  case 'bump':
    versionManager.bumpVersion(param || 'patch')
    break
  case 'history':
    versionManager.showVersionHistory()
    break
  case 'switch':
    if (!param) {
      console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è')
      process.exit(1)
    }
    versionManager.switchToVersion(param)
    break
  case 'help':
  default:
    console.log(`
üöÄ Version Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞

–ö–æ–º–∞–Ω–¥—ã:
  current                    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  bump [major|minor|patch]   –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é patch)
  history                    –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
  switch <version>           –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
  help                       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/version-manager.js current
  node scripts/version-manager.js bump minor
  node scripts/version-manager.js history
  node scripts/version-manager.js switch 1.2.0
`)
    break
}

module.exports = VersionManager
