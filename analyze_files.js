#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç—ã –∏–∑ TypeScript/JavaScript —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function analyzeFile(filePath, content) {
  const fileName = path.basename(filePath);
  const relativePath = path.relative(process.cwd(), filePath);

  const analysis = {
    file: relativePath,
    functions: [],
    classes: [],
    interfaces: [],
    exports: [],
    imports: []
  };

  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const functionRegex = /(?:export\s+)?(?:async\s+)?function\s+(\w+)|\b(\w+)\s*:\s*(?:\([^)]*\)|[^=]*)\s*=>|(?:export\s+)?const\s+(\w+)\s*=/g;
  const classRegex = /(?:export\s+)?class\s+(\w+)/g;
  const interfaceRegex = /(?:export\s+)?interface\s+(\w+)/g;
  const exportRegex = /export\s+(?:const\s+)?(\w+)/g;
  const importRegex = /import\s+.*?from\s+['"](.+?)['"]/g;

  // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
  let match;
  while ((match = functionRegex.exec(content)) !== null) {
    const funcName = match[1] || match[2] || match[3];
    if (funcName && !['React', 'useState', 'useEffect'].includes(funcName)) {
      analysis.functions.push(funcName);
    }
  }

  // –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤
  while ((match = classRegex.exec(content)) !== null) {
    analysis.classes.push(match[1]);
  }

  // –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
  while ((match = interfaceRegex.exec(content)) !== null) {
    analysis.interfaces.push(match[1]);
  }

  // –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
  while ((match = exportRegex.exec(content)) !== null) {
    if (match[1] && match[1] !== 'default') {
      analysis.exports.push(match[1]);
    }
  }

  // –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
  while ((match = importRegex.exec(content)) !== null) {
    analysis.imports.push(match[1]);
  }

  return analysis;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
function processDirectory(dirPath) {
  const results = [];

  try {
    const items = fs.readdirSync(dirPath);

    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory() && !item.includes('node_modules') && !item.includes('dist')) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        results.push(...processDirectory(fullPath));
      } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx') || item.endsWith('.js') || item.endsWith('.jsx'))) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        const content = readFile(fullPath);
        if (content) {
          const analysis = analyzeFile(fullPath, content);
          if (analysis.functions.length > 0 || analysis.classes.length > 0 || analysis.interfaces.length > 0) {
            results.push(analysis);
          }
        }
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error.message);
  }

  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const projectRoot = process.cwd();
  const appDir = path.join(projectRoot, 'app');

  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...\n');

  const results = processDirectory(appDir);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const outputPath = path.join(projectRoot, 'analysis_results.json');
  fs.writeFileSync(outputPath, JSON.stringify(results, null, 2));

  console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–¥–æ–º.`);
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);

  // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalFunctions = results.reduce((sum, file) => sum + file.functions.length, 0);
  const totalClasses = results.reduce((sum, file) => sum + file.classes.length, 0);
  const totalInterfaces = results.reduce((sum, file) => sum + file.interfaces.length, 0);

  console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –§—É–Ω–∫—Ü–∏–π: ${totalFunctions}`);
  console.log(`   –ö–ª–∞—Å—Å–æ–≤: ${totalClasses}`);
  console.log(`   –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: ${totalInterfaces}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
main();
