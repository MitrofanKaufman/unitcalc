import {
  ProductEntity,
  MarketplaceEntity,
  ProductCategoryEntity,
  CreateProductDto,
  UpdateProductDto,
  SearchProductsDto,
  PaginatedResponse,
  MARKETPLACE_COMMISSIONS,
  PRODUCT_CATEGORIES,
  VALIDATION_RULES
} from '../types';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
 */
export class ProductService {
  private products: Map<string, ProductEntity> = new Map();
  private marketplaces: Map<string, MarketplaceEntity> = new Map();
  private categories: Map<string, ProductCategoryEntity> = new Map();

  constructor() {
    this.initializeDefaultData();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private initializeDefaultData() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
    const defaultMarketplaces: MarketplaceEntity[] = [
      {
        id: 'wb',
        name: 'Wildberries',
        icon: 'üõçÔ∏è',
        color: '#7B68EE',
        commission: MARKETPLACE_COMMISSIONS.wb,
        isActive: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'ozon',
        name: 'Ozon',
        icon: 'üì¶',
        color: '#0058FF',
        commission: MARKETPLACE_COMMISSIONS.ozon,
        isActive: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'yandex',
        name: 'Yandex Market',
        icon: 'üõí',
        color: '#FF3333',
        commission: MARKETPLACE_COMMISSIONS.yandex,
        isActive: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ];

    defaultMarketplaces.forEach(marketplace => {
      this.marketplaces.set(marketplace.id, marketplace);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    PRODUCT_CATEGORIES.forEach(category => {
      const categoryEntity: ProductCategoryEntity = {
        id: category.id,
        name: category.name,
        isActive: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      this.categories.set(category.id, categoryEntity);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    this.initializeTestProducts();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  private initializeTestProducts() {
    const testProducts: ProductEntity[] = [
      {
        id: 'wb_1',
        name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy A54 256GB',
        price: 35000,
        category: 'electronics',
        marketplaceId: 'wb',
        characteristics: {
          weight: 202,
          dimensions: { length: 158, width: 76, height: 8 },
          brand: 'Samsung',
          rating: 4.5,
          reviews: 1250
        },
        scrapedAt: new Date().toISOString(),
        sourceUrl: 'https://www.wildberries.ru/catalog/123456789',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'ozon_1',
        name: '–ù–æ—É—Ç–±—É–∫ Lenovo IdeaPad 3 15.6"',
        price: 55000,
        category: 'electronics',
        marketplaceId: 'ozon',
        characteristics: {
          weight: 2500,
          dimensions: { length: 359, width: 236, height: 20 },
          brand: 'Lenovo',
          rating: 4.2,
          reviews: 890
        },
        scrapedAt: new Date().toISOString(),
        sourceUrl: 'https://www.ozon.ru/product/987654321',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ];

    testProducts.forEach(product => {
      this.products.set(product.id, product);
    });
  }

  /**
   * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
   */
  async searchProducts(dto: SearchProductsDto): Promise<ProductEntity[]> {
    const { query, marketplace, category, limit = 20, offset = 0 } = dto;

    let results = Array.from(this.products.values());

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (query) {
      results = results.filter(product =>
        product.name.toLowerCase().includes(query.toLowerCase()) ||
        product.characteristics?.brand?.toLowerCase().includes(query.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
    if (marketplace) {
      results = results.filter(product => product.marketplaceId === marketplace);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category) {
      results = results.filter(product => product.category === category);
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const startIndex = offset;
    const endIndex = startIndex + limit;
    results = results.slice(startIndex, endIndex);

    return results;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
   */
  async getProduct(id: string): Promise<ProductEntity | null> {
    return this.products.get(id) || null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   */
  async createProduct(dto: CreateProductDto): Promise<ProductEntity> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.validateProductData(dto);

    const now = new Date().toISOString();
    const product: ProductEntity = {
      id: `product_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      ...dto,
      scrapedAt: dto.sourceUrl ? now : undefined,
      createdAt: now,
      updatedAt: now
    };

    this.products.set(product.id, product);
    return product;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   */
  async updateProduct(id: string, dto: UpdateProductDto): Promise<ProductEntity | null> {
    const existingProduct = this.products.get(id);
    if (!existingProduct) {
      return null;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.validateProductData(dto, false);

    const updatedProduct: ProductEntity = {
      ...existingProduct,
      ...dto,
      updatedAt: new Date().toISOString()
    };

    this.products.set(id, updatedProduct);
    return updatedProduct;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
   */
  async getMarketplaces(): Promise<MarketplaceEntity[]> {
    return Array.from(this.marketplaces.values()).filter(m => m.isActive);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getCategories(): Promise<ProductCategoryEntity[]> {
    return Array.from(this.categories.values()).filter(c => c.isActive);
  }

  /**
   * –°–∫—Ä–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
   */
  async scrapeProduct(url: string, marketplaceId: string): Promise<ProductEntity | null> {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Puppeteer/Playwright
    console.log(`üîç –°–∫—Ä–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —Å URL: ${url} –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: ${marketplaceId}`);

    // –≠–º—É–ª—è—Ü–∏—è —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    const product: ProductEntity = {
      id: `scraped_${Date.now()}`,
      name: `–¢–æ–≤–∞—Ä –∏–∑ ${marketplaceId}`,
      price: Math.floor(Math.random() * 50000) + 10000,
      category: 'electronics',
      marketplaceId,
      characteristics: {
        weight: Math.floor(Math.random() * 1000) + 100,
        dimensions: {
          length: Math.floor(Math.random() * 200) + 50,
          width: Math.floor(Math.random() * 100) + 20,
          height: Math.floor(Math.random() * 50) + 10
        },
        brand: 'Scraped Brand',
        rating: Math.floor(Math.random() * 5) + 1,
        reviews: Math.floor(Math.random() * 1000) + 100
      },
      scrapedAt: new Date().toISOString(),
      sourceUrl: url,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    this.products.set(product.id, product);
    return product;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
   */
  private validateProductData(data: CreateProductDto | UpdateProductDto, isCreate = true): void {
    if (isCreate || data.name !== undefined) {
      if (!data.name || data.name.length < VALIDATION_RULES.productName.minLength) {
        throw new Error(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${VALIDATION_RULES.productName.minLength} —Å–∏–º–≤–æ–ª–∞`);
      }
      if (data.name.length > VALIDATION_RULES.productName.maxLength) {
        throw new Error(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${VALIDATION_RULES.productName.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
      }
      if (!VALIDATION_RULES.productName.pattern.test(data.name)) {
        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã');
      }
    }

    if (isCreate || data.price !== undefined) {
      if (data.price === undefined || data.price < VALIDATION_RULES.price.min) {
        throw new Error(`–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${VALIDATION_RULES.price.min}`);
      }
      if (data.price > VALIDATION_RULES.price.max) {
        throw new Error(`–¶–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${VALIDATION_RULES.price.max}`);
      }
    }

    if (isCreate || data.marketplaceId !== undefined) {
      if (!data.marketplaceId || !this.marketplaces.has(data.marketplaceId)) {
        throw new Error('–£–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å');
      }
    }

    if (isCreate || data.category !== undefined) {
      if (!data.category || !this.categories.has(data.category)) {
        throw new Error('–£–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
   */
  async getStats(): Promise<{
    totalProducts: number;
    totalMarketplaces: number;
    totalCategories: number;
    productsByMarketplace: Record<string, number>;
    productsByCategory: Record<string, number>;
  }> {
    const products = Array.from(this.products.values());
    const marketplaces = Array.from(this.marketplaces.values());
    const categories = Array.from(this.categories.values());

    const productsByMarketplace: Record<string, number> = {};
    const productsByCategory: Record<string, number> = {};

    products.forEach(product => {
      productsByMarketplace[product.marketplaceId] =
        (productsByMarketplace[product.marketplaceId] || 0) + 1;
      productsByCategory[product.category] =
        (productsByCategory[product.category] || 0) + 1;
    });

    return {
      totalProducts: products.length,
      totalMarketplaces: marketplaces.filter(m => m.isActive).length,
      totalCategories: categories.filter(c => c.isActive).length,
      productsByMarketplace,
      productsByCategory
    };
  }
}
