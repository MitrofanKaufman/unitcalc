import { Product, ApiResponse, AsyncState } from '@/types';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ç–æ–≤–∞—Ä–æ–≤
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º: –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí —Å–µ—Ä–≤–µ—Ä ‚Üí —Å–∫—Ä–∞–ø–ø–∏–Ω–≥
 */
export class ProductStorageService {
  private static readonly STORAGE_KEY = 'marketplace_products';
  private static readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
   * –ê–ª–≥–æ—Ä–∏—Ç–º: –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí —Å–µ—Ä–≤–µ—Ä ‚Üí —Å–∫—Ä–∞–ø–ø–∏–Ω–≥
   */
  static async getProduct(productId: string): Promise<Product | null> {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const localProduct = this.getFromLocalStorage(productId);
      if (localProduct && this.isCacheValid(localProduct)) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        return localProduct;
      }

      // 2. –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
      const serverProduct = await this.getFromServer(productId);
      if (serverProduct) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
        this.saveToLocalStorage(serverProduct);
        return serverProduct;
      }

      // 3. –°–∫—Ä–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö...');
      const scrapedProduct = await this.scrapeProduct(productId);
      if (scrapedProduct) {
        this.saveToLocalStorage(scrapedProduct);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        this.sendToServer(scrapedProduct);
        return scrapedProduct;
      }

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  static async searchProducts(
    query: string,
    marketplace?: string,
    category?: string
  ): Promise<Product[]> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const localProducts = this.searchInLocalStorage(query, marketplace, category);

      if (localProducts.length > 0) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        return localProducts;
      }

      // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
      const serverProducts = await this.searchOnServer(query, marketplace, category);

      if (serverProducts.length > 0) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        serverProducts.forEach(product => this.saveToLocalStorage(product));
        return serverProducts;
      }

      // –°–∫—Ä–∞–ø–ø–∏–Ω–≥
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...');
      const scrapedProducts = await this.scrapeProducts(query, marketplace, category);

      if (scrapedProducts.length > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        scrapedProducts.forEach(product => this.saveToLocalStorage(product));
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        this.sendProductsToServer(scrapedProducts);
        return scrapedProducts;
      }

      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  private static getFromLocalStorage(productId: string): Product | null {
    try {
      const stored = localStorage.getItem(`${this.STORAGE_KEY}_${productId}`);
      if (!stored) return null;

      const product = JSON.parse(stored) as Product;
      return product;
    } catch {
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  private static searchInLocalStorage(
    query: string,
    marketplace?: string,
    category?: string
  ): Product[] {
    try {
      const keys = Object.keys(localStorage).filter(key =>
        key.startsWith(this.STORAGE_KEY)
      );

      const products: Product[] = [];

      for (const key of keys) {
        const stored = localStorage.getItem(key);
        if (!stored) continue;

        const product = JSON.parse(stored) as Product;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞
        if (marketplace && product.marketplace !== marketplace) continue;
        if (category && product.category !== category) continue;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
        if (query && !this.matchesSearchQuery(product, query)) continue;

        products.push(product);
      }

      return products.slice(0, 20); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    } catch {
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
   */
  private static matchesSearchQuery(product: Product, query: string): boolean {
    const searchText = query.toLowerCase();
    return (
      product.name.toLowerCase().includes(searchText) ||
      product.characteristics?.brand?.toLowerCase().includes(searchText) ||
      product.category.toLowerCase().includes(searchText)
    );
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  private static saveToLocalStorage(product: Product): void {
    try {
      const productWithCache = {
        ...product,
        cached: true,
        lastUpdated: new Date().toISOString()
      };
      localStorage.setItem(
        `${this.STORAGE_KEY}_${product.id}`,
        JSON.stringify(productWithCache)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
   */
  private static isCacheValid(product: Product): boolean {
    if (!product.lastUpdated) return false;

    const cacheTime = new Date(product.lastUpdated).getTime();
    const now = Date.now();

    return (now - cacheTime) < this.CACHE_DURATION;
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É (–∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API)
   */
  private static async getFromServer(productId: string): Promise<Product | null> {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    // return await api.get(`/products/${productId}`);

    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    await new Promise(resolve => setTimeout(resolve, 200));
    return null; // –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
  }

  /**
   * –ü–æ–∏—Å–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private static async searchOnServer(
    query: string,
    marketplace?: string,
    category?: string
  ): Promise<Product[]> {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    // return await api.get('/products/search', { params: { query, marketplace, category } });

    await new Promise(resolve => setTimeout(resolve, 300));
    return []; // –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
  }

  /**
   * –°–∫—Ä–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Puppeteer/Playwright)
   */
  private static async scrapeProduct(productId: string): Promise<Product | null> {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–ø–∏–Ω–≥
    // return await scraper.scrapeProduct(productId);

    console.log(`üîç –°–∫—Ä–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ ${productId}...`);

    // –≠–º—É–ª—è—Ü–∏—è —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (Math.random() > 0.3) { // 70% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
      return {
        id: productId,
        name: `–¢–æ–≤–∞—Ä ${productId}`,
        price: Math.floor(Math.random() * 50000) + 10000,
        category: 'electronics',
        marketplace: 'wb',
        characteristics: {
          weight: Math.floor(Math.random() * 1000) + 100,
          dimensions: {
            length: Math.floor(Math.random() * 200) + 50,
            width: Math.floor(Math.random() * 100) + 20,
            height: Math.floor(Math.random() * 50) + 10
          },
          brand: 'BrandName',
          rating: Math.floor(Math.random() * 5) + 1,
          reviews: Math.floor(Math.random() * 1000) + 100
        },
        cached: false,
        lastUpdated: new Date().toISOString()
      };
    }

    return null;
  }

  /**
   * –°–∫—Ä–∞–ø–ø–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private static async scrapeProducts(
    query: string,
    marketplace?: string,
    category?: string
  ): Promise<Product[]> {
    console.log(`üîç –°–∫—Ä–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);

    // –≠–º—É–ª—è—Ü–∏—è —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞
    await new Promise(resolve => setTimeout(resolve, 1500));

    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const products: Product[] = [];
    const count = Math.floor(Math.random() * 5) + 3; // 3-7 —Ç–æ–≤–∞—Ä–æ–≤

    for (let i = 0; i < count; i++) {
      products.push({
        id: `${marketplace || 'wb'}_${Date.now()}_${i}`,
        name: `${query} ${i + 1}`,
        price: Math.floor(Math.random() * 50000) + 10000,
        category: category || 'electronics',
        marketplace: marketplace || 'wb',
        characteristics: {
          weight: Math.floor(Math.random() * 1000) + 100,
          dimensions: {
            length: Math.floor(Math.random() * 200) + 50,
            width: Math.floor(Math.random() * 100) + 20,
            height: Math.floor(Math.random() * 50) + 10
          },
          brand: `Brand ${i + 1}`,
          rating: Math.floor(Math.random() * 5) + 1,
          reviews: Math.floor(Math.random() * 1000) + 100
        },
        cached: false,
        lastUpdated: new Date().toISOString()
      });
    }

    return products;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private static async sendToServer(product: Product): Promise<void> {
    try {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
      // await api.post('/products', product);

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${product.id}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private static async sendProductsToServer(products: Product[]): Promise<void> {
    try {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
      // await api.post('/products/batch', { products });

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞
   */
  static cleanupCache(): void {
    try {
      const keys = Object.keys(localStorage).filter(key =>
        key.startsWith(this.STORAGE_KEY)
      );

      let cleaned = 0;
      for (const key of keys) {
        const stored = localStorage.getItem(key);
        if (!stored) continue;

        const product = JSON.parse(stored) as Product;
        if (!this.isCacheValid(product)) {
          localStorage.removeItem(key);
          cleaned++;
        }
      }

      if (cleaned > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
   */
  static getCacheStats(): { total: number; valid: number; expired: number } {
    try {
      const keys = Object.keys(localStorage).filter(key =>
        key.startsWith(this.STORAGE_KEY)
      );

      let valid = 0;
      let expired = 0;

      for (const key of keys) {
        const stored = localStorage.getItem(key);
        if (!stored) continue;

        const product = JSON.parse(stored) as Product;
        if (this.isCacheValid(product)) {
          valid++;
        } else {
          expired++;
        }
      }

      return {
        total: keys.length,
        valid,
        expired
      };
    } catch {
      return { total: 0, valid: 0, expired: 0 };
    }
  }
}
