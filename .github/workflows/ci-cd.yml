# \.github\workflows\ci-cd.yml
# GitHub Actions workflow для CI/CD

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Проверка кода и линтинг
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [client, server]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.service }}
          npm run lint

      - name: Run type checking
        run: |
          cd ${{ matrix.service }}
          npm run type-check || npm run build  # Для сервера

      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          npm test

      - name: Build application
        run: |
          cd ${{ matrix.service }}
          npm run build

  # Тестирование E2E
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build applications
        run: |
          cd server && npm run build
          cd ../client && npm run build

      - name: Start services for testing
        run: |
          cd server && npm start &
          cd ../client && npm run preview &
          sleep 10

      - name: Run E2E tests
        run: npx playwright test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Сборка Docker образов
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: your-dockerhub-username/wb-calc
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          push: true
          tags: ${{ steps.meta.outputs.tags }}-server
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.client
          push: true
          tags: ${{ steps.meta.outputs.tags }}-client
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Деплой в staging окружение
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Здесь будут команды для деплоя в staging
          # kubectl, docker-compose, ansible и т.д.

  # Деплой в production окружение
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Здесь будут команды для деплоя в production
          # kubectl, docker-compose, ansible и т.д.

      - name: Post-deployment health check
        run: |
          echo "Running post-deployment health checks..."
          # Проверка здоровья после деплоя
